name: CI-linux

on:
  pull_request:
    paths:
      - '**'
      - '!README'
      - '!INSTALL'
      - '!NEWS'
      - '!doc/**'
      - '!.**'
      - '.github/workflows/CI-linux.yml'
  push:
    branches:
      - v[0-9].*
      - master

jobs:
  build:
    runs-on: ubuntu-latest
    name: build-${{ join(matrix.*, ' ') }}
    strategy:
      fail-fast: false
      matrix:
        HOST:
          - x86_64-linux-gnu
          - x86-linux-gnu
          - arm-linux-gnueabihf
          - aarch64-linux-gnu
          - mipsel-linux-gnu
          - powerpc64-linux-gnu
        OPT:
          - O0
          - O3
    steps:
      - uses: actions/checkout@v2
      - name: Setup
        run: |
          HOST=${{ matrix.HOST }}
          if [ $HOST = 'x86-linux-gnu' ]; then
            sudo apt-get update
            sudo apt-get install -yqq -o=Dpkg::Use-Pty=0 g++-multilib
          elif [ $HOST != 'x86_64-linux-gnu' ]; then
            sudo apt-get update
            sudo apt-get install -yqq -o=Dpkg::Use-Pty=0 g++-$HOST
          fi
      - name: Configure
        run: |
          set -x
          HOST=${{ matrix.HOST }}
          BUILD=x86_64-linux-gnu
          if [ $HOST = 'x86-linux-gnu' ]; then
            CFLAGS="-m32"
            CXXFLAGS="-m32"
            BUILD=x86-linux-gnu
          fi
          export CFLAGS="$CFLAGS -${{ matrix.OPT }}"
          export CXXFLAGS="$CXXFLAGS -${{ matrix.OPT}}"
          autoreconf -i
          ./configure --build=$BUILD --host=$HOST
          make -j8
      - name: Test (native)
        if: ${{ success() && (matrix.HOST == 'x86_64-linux-gnu' || matrix.HOST == 'x86-linux-gnu') }}
        run: |
          set -x
          sudo bash -c 'echo core.%p.%p > /proc/sys/kernel/core_pattern'
          ulimit -c unlimited
          make check -j8
      - name: Show Logs
        if: ${{ always() }}
        run: |
          cat tests/test-suite.log 2>/dev/null

  build-cross-qemu:
    runs-on: ubuntu-latest
    name: build-cross-qemu-${{ matrix.config.target }}

    strategy:
      fail-fast: false
      matrix:
        config:
          - {target: arm,     toolchain: 'gcc-arm-linux-gnueabi g++-arm-linux-gnueabi',             host: arm-linux-gnueabi,      libc: libc6-arm-cross         }
          - {target: armhf,   toolchain: 'gcc-arm-linux-gnueabihf g++-arm-linux-gnueabihf',         host: arm-linux-gnueabihf,    libc: libc6-arm-cross         }
          - {target: aarch64, toolchain: 'gcc-aarch64-linux-gnu, g++-aarch64-linux-gnu,',           host: aarch64-linux-gnu,      libc: libc6-arm64-cross       }
          - {target: riscv64, toolchain: 'gcc-riscv64-linux-gnu, g++-riscv64-linux-gnu,',           host: riscv64-linux-gnu,      libc: libc6-riscv64-cross     }
          - {target: ppc,     toolchain: 'gcc-powerpc-linux-gnu, g++-powerpc-linux-gnu,',           host: powerpc-linux-gnu,      libc: libc6-ppc-cross         }
          - {target: ppc64,   toolchain: 'gcc-powerpc64-linux-gnu, g++-powerpc64-linux-gnu,',       host: powerpc64-linux-gnu,    libc: libc6-ppc64-cross       }
          - {target: ppc64le, toolchain: 'gcc-powerpc64le-linux-gnu, g++-powerpc64le-linux-gnu,',   host: powerpc64le-linux-gnu,  libc: libc6-ppc64le-cross     }
          - {target: s390x,   toolchain: 'gcc-s390x-linux-gnu, g++-s390x-linux-gnu,',               host: s390x-linux-gnu,        libc: libc6-s390x-cross       }
          - {target: mips,    toolchain: 'gcc-mips-linux-gnu, g++-mips-linux-gnu,',                 host: mips-linux-gnu,         libc: libc6-mips-cross        }
          - {target: mips64,  toolchain: 'gcc-mips64-linux-gnuabi64, g++-mips64-linux-gnuabi64,',   host: mips64-linux-gnuabi64,  libc: libc6-mips64-cross      }
          - {target: mipsel,  toolchain: 'gcc-mipsel-linux-gnu, g++-mipsel-linux-gnu,',             host: mipsel-linux-gnu,       libc: libc6-mipsel-cross      }
          - {target: mips64el,toolchain: 'gcc-mips64el-linux-gnuabi64, g++-mips64el-linux-gnuabi64,',host: mips64el-linux-gnuabi64,libc: libc6-mips64el-cross   }

    steps:
      - uses: actions/checkout@v2
      - name: Install QEMU
        run: |
          sudo apt update
          sudo apt install qemu-user -y
      - name: Install ${{ matrix.config.toolchain }}
        run: |
          sudo apt install ${{ matrix.config.toolchain }} ${{ matrix.config.libc }} -y
          sudo ln -s /usr/${{ matrix.config.host }}/lib/ld-linux-${{ matrix.config.target }}.so.1 /lib/
      - name: Configure with ${{ matrix.config.cc }}
        run: |
          set -x
          autoreconf -i
          BUILD=x86_64-linux-gnu
          ./configure --build=$BUILD --host=${{ matrix.config.host }}
      - name: Build
        run: |
          make -j8
      - name: Test
        run: |
          set -x
          sudo bash -c 'echo core.%p.%p > /proc/sys/kernel/core_pattern'
          ulimit -c unlimited
          LOG_COMPILER='../libtool --mode=execute qemu-${{ matrix.config.target }} -E LD_PRELOAD=~+/.libs/setrlimit_disable.so'
          TESTS_ENVIRONMENT='LD_LIBRARY_PATH=/usr/${{ matrix.config.target }}-linux-gnu/lib'
          make -j8 check
      - name: Show Logs
        if: ${{ always() }}
        run: |
          cat tests/test-suite.log
